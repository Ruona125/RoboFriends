{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constant';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n}); //THESE ARE FOR ASYNC(REDUX THUNK)\n\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n    return response.json();\n  }).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/ruona/Desktop/RoboFriends/src/action.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACEA,mBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,qBAJF,QAKO,YALP;AAOA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACvCC,EAAAA,IAAI,EAAEN,mBADiC;AAEvCO,EAAAA,OAAO,EAAEF;AAF8B,CAAX,CAAvB,C,CAIP;;AACA,OAAO,MAAMG,aAAa,GAAIC,QAAD,IAAc;AACzCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GAHH,EAIGF,IAJH,CAISG,IAAD,IAAUL,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEO;AAAzC,GAAD,CAJ1B,EAKGC,KALH,CAKUC,KAAD,IACLP,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,qBAAR;AAA+BI,IAAAA,OAAO,EAAES;AAAxC,GAAD,CANZ;AAQD,CAVM","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constant';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n//THESE ARE FOR ASYNC(REDUX THUNK)\nexport const requestRobots = (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n"]},"metadata":{},"sourceType":"module"}