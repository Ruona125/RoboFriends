{"ast":null,"code":"var _jsxFileName = \"/Users/ruona/Desktop/RoboFriends/src/containers/App.js\";\n// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import CardList from '../components/CardList';\n// import SearchBox from '../components/SearchBox';\n// import './App.css';\n// import Scroll from '../components/Scroll';\n// import { setSearchField, requestRobots } from '../action';\n// const mapStateToProps = (state) => {\n//   return {\n//     searchField: state.searchRobots.searchField,\n//     robots: state.requestRobots.robots,\n//     isPending: state.requestRobots.isPending,\n//     error: state.requestRobots.error,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n//     onRequestRobots: () => dispatch(requestRobots()),\n//   };\n// };\n// class App extends Component {\n//   // constructor() {\n//   //   super();\n//   //   this.state = {\n//   //     robots: [],\n//   //     // searchField: '',\n//   //   };\n//   // }\n//   componentDidMount() {\n//     this.props.onRequestRobots();\n//     // fetch('https://jsonplaceholder.typicode.com/users')\n//     //   .then((response) => {\n//     //     return response.json();\n//     //   })\n//     //   .then((users) => {\n//     //     this.setState({ robots: users });\n//     //     });\n//   }\n//   // onSearchChange = (event) => {\n//   //   this.setState({ searchField: event.target.value });\n//   // };\n//   render() {\n//     // const { robots } = this.state;\n//     const { searchField, onSearchChange, robots, isPending } = this.props; //this is for the redux\n//     const filteredRobots = robots.filter((robot) => {\n//       return robot.name.toLowerCase().includes(searchField.toLowerCase());\n//     });\n//     return isPending ? (\n//       <h1>Loading...</h1>\n//     ) : (\n//       <div className=\"tc\">\n//         <h1 className=\"f1\">RoboFriends</h1>\n//         <SearchBox searchChange={onSearchChange} />\n//         <Scroll>\n//           <CardList robots={filteredRobots} />\n//         </Scroll>\n//       </div>\n//     );\n//   }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'; // parameter state comes from index.js provider store state(rootReducers)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n}; // dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {\n      robots,\n      searchField,\n      onSearchChange,\n      isPending\n    } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"f1\",\n        children: \"RoboFriends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n        children: isPending ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ErrorBoundry, {\n          children: /*#__PURE__*/_jsxDEV(CardList, {\n            robots: filteredRobots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n} // action done from mapDispatchToProps will channge state from mapStateToProps\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/ruona/Desktop/RoboFriends/src/containers/App.js"],"names":["React","Component","connect","setSearchField","requestRobots","CardList","SearchBox","Scroll","ErrorBoundry","mapStateToProps","state","searchField","searchRobots","robots","isPending","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","componentDidMount","props","render","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,YAA9C;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,WAAP,C,CAEA;;;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAD3B;AAELE,IAAAA,MAAM,EAAEH,KAAK,CAACN,aAAN,CAAoBS,MAFvB;AAGLC,IAAAA,SAAS,EAAEJ,KAAK,CAACN,aAAN,CAAoBU;AAH1B,GAAP;AAKD,CAND,C,CAQA;AACA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACb,cAAc,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD9B;AAELC,IAAAA,eAAe,EAAE,MAAML,QAAQ,CAACZ,aAAa,EAAd;AAF1B,GAAP;AAID,CALD;;AAOA,MAAMkB,GAAN,SAAkBrB,SAAlB,CAA4B;AAC1BsB,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWH,eAAX;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA,MAAF;AAAUF,MAAAA,WAAV;AAAuBM,MAAAA,cAAvB;AAAuCH,MAAAA;AAAvC,QAAqD,KAAKU,KAAhE;AACA,UAAME,cAAc,GAAGb,MAAM,CAACc,MAAP,CAAeC,KAAD,IAAW;AAC9C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCpB,WAAW,CAACmB,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB;AAGA,wBACE;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,YAAY,EAAEb;AAAzB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAA,kBACGH,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADQ,gBAGR,QAAC,YAAD;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,MAAM,EAAEY;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAzByB,C,CA4B5B;;;AACA,eAAexB,OAAO,CAACO,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import CardList from '../components/CardList';\n// import SearchBox from '../components/SearchBox';\n// import './App.css';\n// import Scroll from '../components/Scroll';\n// import { setSearchField, requestRobots } from '../action';\n\n// const mapStateToProps = (state) => {\n//   return {\n//     searchField: state.searchRobots.searchField,\n//     robots: state.requestRobots.robots,\n//     isPending: state.requestRobots.isPending,\n//     error: state.requestRobots.error,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n//     onRequestRobots: () => dispatch(requestRobots()),\n//   };\n// };\n// class App extends Component {\n//   // constructor() {\n//   //   super();\n//   //   this.state = {\n//   //     robots: [],\n//   //     // searchField: '',\n//   //   };\n//   // }\n\n//   componentDidMount() {\n//     this.props.onRequestRobots();\n\n//     // fetch('https://jsonplaceholder.typicode.com/users')\n//     //   .then((response) => {\n//     //     return response.json();\n//     //   })\n//     //   .then((users) => {\n//     //     this.setState({ robots: users });\n//     //     });\n//   }\n\n//   // onSearchChange = (event) => {\n//   //   this.setState({ searchField: event.target.value });\n//   // };\n\n//   render() {\n//     // const { robots } = this.state;\n//     const { searchField, onSearchChange, robots, isPending } = this.props; //this is for the redux\n\n//     const filteredRobots = robots.filter((robot) => {\n//       return robot.name.toLowerCase().includes(searchField.toLowerCase());\n//     });\n//     return isPending ? (\n//       <h1>Loading...</h1>\n//     ) : (\n//       <div className=\"tc\">\n//         <h1 className=\"f1\">RoboFriends</h1>\n//         <SearchBox searchChange={onSearchChange} />\n//         <Scroll>\n//           <CardList robots={filteredRobots} />\n//         </Scroll>\n//       </div>\n//     );\n//   }\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n  };\n};\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? (\n            <h1>Loading</h1>\n          ) : (\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}